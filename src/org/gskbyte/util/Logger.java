/*******************************************************************************
 * Copyright (c) 2013 Jose Alcalá Correa.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-3.0.txt
 * 
 * Contributors:
 *     Jose Alcalá Correa - initial API and implementation
 ******************************************************************************/
package org.gskbyte.util;

import android.util.SparseArray;

/**
 * Logger class that simplifies the usage of {@link android.util.Log}.
 * 
 * Allows to configure globally if messages with info and debug levels will be
 * printed.
 * */
public final class Logger
{    
public static boolean LOG_INFO    = true;
public static boolean LOG_DEBUG   = true;

private static int CurrentTimeId = 0;
private static final SparseArray<Long> TimeMeasurements = new SparseArray<Long>();

/**
 * Log an info message, if LOG_INFO is enabled.
 * @param tag The log tag.
 * @param message The message to print.
 * */
public static void info(String tag, String message)
{
    if(LOG_INFO) {
        android.util.Log.i(tag, message);
    }
}

/**
 * Log an info message, if LOG_INFO is enabled.
 * @param clazz The caller's class, whose simpleName will be used as tag.
 * @param message The message to print.
 * */
public static void info(Class<?> clazz, String message)
{ info(clazz.getSimpleName(), message); }


/**
 * Log a debug message, if LOG_DEBUG is enabled.
 * @param tag The log tag.
 * @param message The message to print.
 * */
public static void debug(String tag, String message)
{
    if(LOG_INFO) {
        android.util.Log.d(tag, message);
    }
}

/**
 * Log a debug message, if LOG_DEBUG is enabled.
 * @param clazz The caller's class, whose simpleName will be used as tag.
 * @param message The message to print.
 * */
public static void debug(Class<?> clazz, String message)
{ debug(clazz.getSimpleName(), message); }

/**
 * Log an error message
 * @param tag The log tag.
 * @param message The message to print.
 * */
public static void error(String tag, String message)
{
    if(LOG_INFO) {
        android.util.Log.e(tag, message);
    }
}
/**
 * Log an error message.
 * @param clazz The caller's class, whose simpleName will be used as tag.
 * @param message The message to print.
 * */
public static void error(Class<?> clazz, String message)
{ error(clazz.getSimpleName(), message); }

/**
 * Log an error message generated by an exception.
 * @param tag The log tag.
 * @param e The exception whose message will be printed.
 * */
public static void except(String tag, Exception e)
{ android.util.Log.e(tag, ""+e.getMessage()); }

/**
 * Log an error message generated by an exception.
 * @param clazz The caller's class, whose simpleName will be used as tag.
 * @param e The exception whose message will be printed.
 * */
public static void except(Class<?> clazz, Exception e)
{ except(clazz.getSimpleName(), e); }

/**
 * Utility method to start a time measurement. Returns an integer identifier
 * which needs to be used in a call to logTimeMeasurement().
 * @return the integer id used to log the time
 * */
public static synchronized int startTimeMeasurement()
{
    if(LOG_INFO) {
        final int timeId = ++CurrentTimeId;
        TimeMeasurements.put(timeId, System.currentTimeMillis());
        return timeId;
    } else {
        return -1;
    }
}

/**
 * Given the integer id provided by startTimeMeasurement, logs the time passed between both calls.
 * Logs are printed using debug level, so they depend on LOG_DEBUG's value
 * @param timeId The time id provided previously by startTimeMeasurement()
 * @param tag The log tag.
 * @param message The base message to print with the format #message -> #time ms
 * */
public static synchronized void logTimeMeasurement(int timeId, String tag, String message)
{
    if(!LOG_DEBUG)
        return;
    
    Long start = TimeMeasurements.get(timeId);
    if(start != null) {
        long time = System.currentTimeMillis()-start;
        TimeMeasurements.remove(timeId);
        android.util.Log.d(tag, message + " -> " + time + " ms");
    } else {
        android.util.Log.d(tag, "Invalid time measurement id: " + timeId);
    }
}

/**
 * Given the integer id provided by startTimeMeasurement, logs the time passed between both calls.
 * Logs are printed using debug level, so they depend on LOG_DEBUG's value
 * @param timeId The time id provided previously by startTimeMeasurement()
 * @param clazz The caller's class, whose simpleName will be used as tag.
 * @param message The base message to print with the format #message -> #time ms
 * */
public static synchronized void endTimeMeasure(int timeId, Class<?> clazz, String message)
{ logTimeMeasurement(timeId, clazz.getSimpleName(), message); }

}
